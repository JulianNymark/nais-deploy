name: NAIS deploy action + dockerhub
on:
  push:
    branches:
      - master
    paths-ignore:
      - '.github/workflows/codeql-analysis.yml'
      - '.github/workflows/job.yaml'
      - '.github/workflows/naisjob-without-schedule.yaml'
      - '.github/workflows/naisjob.yaml'
      - 'deploy/testdata/naisjob.yaml'
      - 'deploy/testdata/job.yaml'
      - 'deploy/testdata/naisjob-without-schedule.yaml'
      - '*.md'
env:
  IMAGE: "navikt/deployment"
jobs:
  build:
    name: Build Docker container
    runs-on: ubuntu-latest
    outputs:
      image_digest: ${{ steps.push.outputs.image_digest }}
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3

      - name: Generate version tags
        run: |
          echo "version=$(./version.sh)" >> $GITHUB_ENV
          echo "deploy_action_api_version=$(cat actions/deploy/version)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # ratchet:docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker images
        run: |
          docker build \
            -f Dockerfile.deploy \
            --tag ${IMAGE}:${version} \
            --tag ${IMAGE}:${deploy_action_api_version}-grpc \
            --tag ${IMAGE}:latest \
            .

      - name: Push Docker image
        id: push
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
        run: |
          docker push ${IMAGE}:${version}
          docker push ${IMAGE}:${deploy_action_api_version}-grpc
          docker push ${IMAGE}:latest
          echo "image_digest=$(docker inspect ${IMAGE}:${deploy_action_api_version}-grpc | jq -r '.[].RepoDigests[]')" >> $GITHUB_OUTPUT

  release:
    name: Release versioned GitHub Action
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # ratchet:actions/checkout@v3

      - name: Force create tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git remote set-url origin "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git tag -f $(cat actions/deploy/version)
          git push -f --tags

      - name: Create deploy binaries
        run: |
          make deploy-release-linux
          make deploy-release-darwin
          make deploy-release-windows

      - name: Delete release if exists
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest=$(curl https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest)
          tag=$(echo $latest | jq .tag_name | xargs) # xargs strips quotes
          if grep -q "$tag" actions/deploy/version; then
            release_id=$(echo $latest | jq .id)
            curl -X DELETE https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}
          fi

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          release=$(curl -X POST \
            -d '{"tag_name": "'"$(cat actions/deploy/version)"'"}' \
            -H "Content-Type: application/json" \
            https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases)
          echo "release_id=$(echo $release | jq .id)" >> ${GITHUB_OUTPUT}

      - name: Upload Linux Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY: deploy-linux
        run: |
          curl -X POST \
          -H 'Content-Type: application/x-executable' \
          --data-binary @${BINARY} \
          https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}

      - name: Upload Darwin Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY: deploy-darwin
        run: |
          curl -X POST \
          -H 'Content-Type: application/x-executable' \
          --data-binary @${BINARY} \
          https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}

      - name: Upload Windows Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BINARY: deploy-windows
        run: |
          curl -X POST \
          -H 'Content-Type: application/x-executable' \
          --data-binary @${BINARY} \
          https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}

  slsafy:
    name: Sign and attest the images
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      image_digest: ${{ needs.build.outputs.image_digest }}
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65 # ratchet:sigstore/cosign-installer@main
        with:
          cosign-release: 'v2.0.0'

      - name: Login to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # ratchet:docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Sign the container images
        run: echo "y" | cosign sign ${{ env.IMG }}

      - name: Create SBOM for image
        uses: aquasecurity/trivy-action@8bd2f9fbda2109502356ff8a6a89da55b1ead252 # ratchet:aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          format: 'cyclonedx'
          output: 'image.sbom.json'
          image-ref: ${{ env.image_digest }}

      - name: Sign the container images
        run: |
          echo "y" | cosign sign ${{ env.image_digest }}

      - name: Attest images
        run: |
          echo "y" | cosign attest --predicate image.sbom.json --type cyclonedx ${{ env.image_digest }}
