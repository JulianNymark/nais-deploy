name: NAIS deploy release pipeline

on:
  push:
    paths-ignore:
    - '.github/workflows/codeql-analysis.yml'
    - '.github/workflows/job.yaml'
    - '.github/workflows/naisjob-without-schedule.yaml'
    - '.github/workflows/naisjob.yaml'
    - 'deploy/testdata/naisjob.yaml'
    - 'deploy/testdata/job.yaml'
    - 'deploy/testdata/naisjob-without-schedule.yaml'

env:
  ghcr_registry: ghcr.io/${{ github.repository }}
  gcp_registry: europe-north1-docker.pkg.dev/nais-io/nais/images
  dockerhub_image: navikt/deployment

jobs:
  tags:
    name: Generate version tags
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tags.outputs.version }}
      deploy_action_api_version: ${{ steps.tags.outputs.deploy_action_api_version }}
    steps:
    - uses: actions/checkout@v2
    - name: Generate version tags
      id: tags
      run: |
        echo ::set-output name=version::$(./version.sh)
        echo ::set-output name=deploy_action_api_version::$(cat actions/deploy/version)

  build-and-push:
    name: Build Docker container
    needs:
    - tags
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    strategy:
      matrix:
        include:
          - dockerfile: Dockerfile.hookd
            context: .
            images: |
              ghcr.io/nais/deploy/hookd
              europe-north1-docker.pkg.dev/nais-io/nais/images/hookd
            tags: |
              type=raw,value={{ needs.tags.outputs.version }}

          - dockerfile: Dockerfile.deployd
            context: .
            images: |
              ghcr.io/nais/deploy/deployd
              europe-north1-docker.pkg.dev/nais-io/nais/images/deployd
            tags: |
              type=raw,value={{ needs.tags.outputs.version }}

          - dockerfile: Dockerfile
            context: canary-deployer
            images: |
              ghcr.io/nais/deploy/deployer
              europe-north1-docker.pkg.dev/nais-io/nais/images/deployer
            tags: |
              type=raw,value={{ needs.tags.outputs.version }}

          - dockerfile: Dockerfile.deploy
            context: .
            images: |
              ghcr.io/nais/deploy/deploy
              europe-north1-docker.pkg.dev/nais-io/nais/images/deploy
              navikt/deploy
            tags: |
              type=raw,value={{ needs.tags.outputs.version }}
              type=raw,value={{ needs.tags.outputs.deploy_action_api_version }}
              type=raw,value={{ needs.tags.outputs.deploy_action_api_version }}-grpc
    steps:
    - uses: actions/checkout@v2
    - name: Get Google access token
      id: "auth"
      uses: "google-github-actions/auth@v0.6.0"
      with:
        workload_identity_provider: ${{ secrets.NAIS_IO_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: "gh-deploy@nais-io.iam.gserviceaccount.com"
        token_format: "access_token"
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Login Google Container Registry
      uses: docker/login-action@v1
      with:
        registry: "${{ env.gcp_registry }}"
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"
    - name: Login GitHub Package Registry
      uses: docker/login-action@v1
      with:
        registry: "ghcr.io"
        username: "${{ github.repository }}"
        password: "${{ secrets.GITHUB_TOKEN }}"
    - name: Login Docker Hub
      uses: docker/login-action@v1
      with:
        username: "${{ secrets.DOCKERHUB_USERNAME }}"
        password: "${{ secrets.DOCKERHUB_PASSWORD }}"
    - name: Docker meta
      id: metadata
      uses: docker/metadata-action@v3
      with:
        images: ${{ matrix.images }}
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          ${{ matrix.tags }}
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Release versioned GitHub Action
    if: github.ref == 'refs/heads/master'
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Force create tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        git tag -f $(cat actions/deploy/version)
        git push -f --tags
    - name: Create deploy binaries
      run: |
        make deploy-release-linux
        make deploy-release-darwin
        make deploy-release-windows
    - name: Delete release if exists
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        latest=$(curl https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest)
        tag=$(echo $latest | jq .tag_name | xargs) # xargs strips quotes
        if grep -q "$tag" actions/deploy/version; then
          release_id=$(echo $latest | jq .id)
          curl -X DELETE https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases/${release_id}
        fi
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release=$(curl -X POST \
          -d '{"tag_name": "'"$(cat actions/deploy/version)"'"}' \
          -H "Content-Type: application/json" \
          https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/releases)
        echo ::set-output name=release_id::$(echo $release | jq .id)
    - name: Upload Linux Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BINARY: deploy-linux
      run: |
        curl -X POST \
        -H 'Content-Type: application/x-executable' \
        --data-binary @${BINARY} \
        https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}
    - name: Upload Darwin Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BINARY: deploy-darwin
      run: |
        curl -X POST \
        -H 'Content-Type: application/x-executable' \
        --data-binary @${BINARY} \
        https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}
    - name: Upload Windows Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        BINARY: deploy-windows
      run: |
        curl -X POST \
        -H 'Content-Type: application/x-executable' \
        --data-binary @${BINARY} \
        https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@uploads.github.com/repos/${GITHUB_REPOSITORY}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${BINARY}

  deploy:
    name: Deploy to Kubernetes
    if: github.ref == 'refs/heads/master'
    needs:
    - tags
    - build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        path: deploy
    - uses: navikt/github-app-token-generator@v1
      id: get-token
      with:
        private-key: ${{ secrets.NAIS_APP_PRIVATE_KEY }}
        app-id: ${{ secrets.NAIS_APP_ID }}
        repo: navikt/nais-yaml
    - name: Checkout nais-yaml
      uses: actions/checkout@v2
      with:
        repository: navikt/nais-yaml
        token: ${{ steps.get-token.outputs.token }}
        path: nais-yaml
    - name: Bump version in nais-yaml
      run: |
        cd nais-yaml
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        sed -E -i "s#hookdImage: .+#hookdImage: ghcr.io/nais/deploy/hookd:${{ needs.tags.outputs.version }}#" vars/global.yaml
        sed -E -i "s#deploydImage: .+#deploydImage: ghcr.io/nais/deploy/deployd:${{ needs.tags.outputs.version }}#" vars/global.yaml
        git add .
        git --no-pager diff --cached
        git commit --no-verify -a -m "Bump deployment orchestrator to version ${{ needs.tags.outputs.version }}"
        git push
