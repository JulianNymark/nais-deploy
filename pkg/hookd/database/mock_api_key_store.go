// Code generated by mockery v2.33.2. DO NOT EDIT.

package database

import (
	context "context"

	api_v1 "github.com/nais/deploy/pkg/hookd/api/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockApiKeyStore is an autogenerated mock type for the ApiKeyStore type
type MockApiKeyStore struct {
	mock.Mock
}

// ApiKeys provides a mock function with given fields: ctx, id
func (_m *MockApiKeyStore) ApiKeys(ctx context.Context, id string) (ApiKeys, error) {
	ret := _m.Called(ctx, id)

	var r0 ApiKeys
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ApiKeys, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiKeys); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ApiKeys)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateApiKey provides a mock function with given fields: ctx, team, key
func (_m *MockApiKeyStore) RotateApiKey(ctx context.Context, team string, key api_v1.Key) error {
	ret := _m.Called(ctx, team, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, api_v1.Key) error); ok {
		r0 = rf(ctx, team, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockApiKeyStore creates a new instance of MockApiKeyStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApiKeyStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApiKeyStore {
	mock := &MockApiKeyStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
